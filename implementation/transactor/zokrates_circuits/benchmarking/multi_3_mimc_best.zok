import "hashes/sha256/embed/512bitPadded" as sha256
import "hashes/sha256/embed/1024bitPadded" as sha256_4
import "utils/pack/bool/nonStrictUnpack256.zok" as field_to_bool
import "utils/casts/u32_8_to_bool_256.zok" as u32_8_to_bool_256
import "hashes/mimcSponge/mimcFeistel" as MiMCFeistel
import "utils/pack/bool/pack128.zok" as pack128
import "utils/pack/bool/pack256.zok" as pack256
import "utils/pack/bool/unpack128.zok" as unpack128
import "EMBED/unpack" as unpack

struct Balance {
	field ethAmount
	field tokenAmount
	field nonce
	u32[5] address
}

def mimc_4(field[4] ins) -> field: //5281
	field nInputs = 4
	field nOutputs = 1
	field[4][2] S = [[0; 2]; 4] // Dim: (nInputs + nOutputs - 1, 2)
	field outs = 0

	for field i in 0..nInputs do
		field idx = if i == 0 then 0 else i - 1 fi
		S[i] = if i == 0 then MiMCFeistel(ins[0], 0, 0) else MiMCFeistel(S[idx][0] + ins[i], S[idx][1], 0) fi
	endfor
	outs = S[nInputs - 1][0]
	return outs

def field_to_64bit(field i) -> bool[64]:
    bool[254] b = unpack(i)
    assert(b[0..190] == [false; 190])
    return b[190..254]

def verifyTrades(Balance[3] oldBalances, Balance[3] newBalances, field ethToToken, field tokenToEth) -> (field, field, field):
	field boughtEth = 0
	field soldEth = 0
	field boughtToken = 0
	field soldToken = 0
	for field i in 0..3 do
		assert(oldBalances[i].nonce == newBalances[i].nonce - 1) // makes sure the nonce is incremented
		field tradeDirection = if oldBalances[i].ethAmount >= newBalances[i].ethAmount then 0 else 1 fi
		field deltaEth = if tradeDirection == 0 then oldBalances[i].ethAmount - newBalances[i].ethAmount else newBalances[i].ethAmount - oldBalances[i].ethAmount fi
		field deltaToken = if tradeDirection == 0 then newBalances[i].tokenAmount - oldBalances[i].tokenAmount else oldBalances[i].tokenAmount - newBalances[i].tokenAmount fi
		boughtEth = if tradeDirection == 1 then boughtEth + deltaEth else boughtEth fi
		soldEth = if tradeDirection == 0 then soldEth + deltaEth else soldEth fi
		boughtToken = if tradeDirection == 0 then boughtToken + deltaToken else boughtToken fi
		soldToken = if tradeDirection == 1 then soldToken + deltaToken else soldToken fi
		assert(ethToToken * deltaEth == 10000000000 * deltaToken && tradeDirection == 0 || 1000000000000 * deltaEth == tokenToEth * deltaToken && tradeDirection == 1)
	endfor
	//                                    +Eth, -Token | -Eth, +Token
	field direction = if boughtEth > soldEth then 1 else 0 fi
	field deltaEth = if direction == 1 then boughtEth - soldEth else soldEth - boughtEth fi
	field deltaToken = if direction == 0 then boughtToken - soldToken else soldToken - boughtToken fi
	return direction, deltaEth, deltaToken

def mimc(field[2] ins) -> field:
	field nInputs = 2
	field nOutputs = 1
	field[2][2] S = [[0; 2]; 2] // Dim: (nInputs + nOutputs - 1, 2)

	for field i in 0..nInputs do
		field idx = if i == 0 then 0 else i - 1 fi
		S[i] = if i == 0 then MiMCFeistel(ins[0], 0, 0) else MiMCFeistel(S[idx][0] + ins[i], S[idx][1], 0) fi
	endfor
	return S[nInputs - 1][0]

def mimcHashPair(field a, field b) -> (field):
	return if a > b then mimc([a, b]) else mimc([b, a]) fi

def hashLeafs(Balance[3] balances) -> (field[3]):
	field[3] res = [0,0,0]
	for field i in 0..3 do
		field addrs = pack256(u32_8_to_bool_256([...balances[i].address, 0x00000000, 0x00000000, 0x00000000]))
		field temp = mimc_4([addrs, balances[i].ethAmount, balances[i].tokenAmount, balances[i].nonce])
		res[i] = temp
	endfor
	return res

def getPosition(bool proofFlag, field leafPos, field leafsLen) -> (field):
	return if proofFlag then if leafPos < leafsLen then 0 else 1 fi else 2 fi
	
def verifyMultiProof(field[9] leafs, field[9] proofs, bool[9] proofFlags) -> (field): //92806
	field leafsLen = 3
	field totalHashes = 9
	field[9] hashes = [0;9]
	field[3] indexes = [0, 0, 0] // 0: leafPos, 1: hashPos, 2: proofPos
	for field i in 0..totalHashes do
		field[3] nodes = [leafs[indexes[0]], hashes[indexes[1]], proofs[indexes[2]]]
		field aPos = getPosition(proofFlags[i], indexes[0], leafsLen)
		field a = nodes[aPos]
		indexes[aPos] = indexes[aPos] + 1

		nodes = [leafs[indexes[0]], hashes[indexes[1]], proofs[indexes[2]]]
		field bPos = getPosition(true, indexes[0], leafsLen)
		field b = nodes[bPos]
		indexes[bPos] = indexes[bPos] + 1
		field hash = mimcHashPair(a, b)
		hashes[i] = hash
	endfor
	return hashes[totalHashes - 1]

def hashFinalBalances(field[3] newBalancesHash, field ethToToken, field tokenToEth, field deltaEth, field deltaToken, field direction, field oldRoot, field newRoot) -> (field[2]): //194615 const
	bool[256] rootPrice = sha256_4(field_to_bool(oldRoot), field_to_bool(newRoot), [...field_to_64bit(ethToToken), ...field_to_64bit(tokenToEth), ...field_to_64bit(deltaEth), ...field_to_64bit(deltaToken)], field_to_bool(direction))
	bool[256] res = sha256_4(field_to_bool(newBalancesHash[0]), field_to_bool(newBalancesHash[1]), field_to_bool(newBalancesHash[2]), rootPrice) // hacky
	return [pack128(res[0..128]), pack128(res[128..256])]

def proofToBin(field[9][2] proof) -> (bool[9][256]): //587502
	bool[9][256] result = [[false;256];9]
	for field i in 0..9 do
		result[i] = [...unpack128(proof[i][0]), ...unpack128(proof[i][1])]
	endfor
	return result

def main(private Balance[3] oldBalances, private Balance[3] newBalances, private field[9] proof, private bool[9] proofFlags, private field root, private field ethToToken, private field tokenToEth) -> (field[2]):
	field direction, field deltaEth, field deltaToken = verifyTrades(oldBalances, newBalances, ethToToken, tokenToEth)
	field[9] leafsPadded = [...hashLeafs(oldBalances), ...[0;6]] // we need to pass empty leafs for this to compile. The proof flags will ensure that these values are never used for hashing
	field calcedRoot = verifyMultiProof(leafsPadded, proof, proofFlags)
	assert(root == calcedRoot) // passed trades contain correct balances. First check OK
	field[9] newLeafsPadded = [...hashLeafs(newBalances), ...[0;6]]
	field newRoot = verifyMultiProof(newLeafsPadded, proof, proofFlags)
	return hashFinalBalances(newLeafsPadded[0..3], ethToToken, tokenToEth, deltaEth, deltaToken, direction, calcedRoot, newRoot)


// TODO:
// - Signature check
// contain error in 2nd trade
// Balance[3] oldBalances = [Balance{ethAmount:10000000000,tokenAmount:0,nonce:1,address:[0xcc08e563,0x6A9ceb03,0x917C1ac7,0xBbEda23a,0xD57766F3]},Balance{ethAmount:0,tokenAmount:50000000000000,nonce:1,address:[0x31b87891,0x8679d9DA,0x1DB277B1,0xA2fD67Aa,0x01032920]},Balance{ethAmount:25010000000,tokenAmount:0,nonce:2,address:[0x1D539b71,0x7035B802,0x40d6e783,0x6B2C752E,0x204B7DD4]}]
// Balance[3] newBalances = [Balance{ethAmount:0,tokenAmount:18030043450000,nonce:2,address:[0xcc08e563,0x6A9ceb03,0x917C1ac7,0xBbEda23a,0xD57766F3]},Balance{ethAmount:27731491684,tokenAmount:0,nonce:2,address:[0x31b87891,0x8679d9DA,0x1DB277B1,0xA2fD67Aa,0x01032920]},Balance{ethAmount:10000000,tokenAmount:45075108625000,nonce:3,address:[0x1D539b71,0x7035B802,0x40d6e783,0x6B2C752E,0x204B7DD4]}]
// field[9][2] proof = [[326522724692461750427768532537390503835,89059515727727869117346995944635890507],[265181187819933133817279458938021520211,226826845712117313199728648141007401788],[110894977352237344843883812633147901333,90983754514093244277048472558931415612],[211336224248324717186270758123443705798,103214039003913815936073814883481423152],[287849902845851149564392658358832810366,22992467719797921752054319444564123553],[180666250266229371542610003800057229145,156693885583226463728325172930408513324],[51198084693452429383185080494257164612,322193689052356961661042599016221487507],[0,0],[0,0]]
// bool[9] proofFlags = [true,false,true,false,false,false,false,false,false]
// field[2] root = [335316615939267250285026572727597754018,304430889608956088306359871272981840661]
// field ethToToken = 1000000000000
// field tokenToEth = 1803004345000000