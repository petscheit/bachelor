// echo "[[{\"oldEthAmount\":\"0\",\"oldTokenAmount\":\"0\",\"oldNonce\":\"0\",\"newEthAmount\":\"1000000000000\",\"newTokenAmount\":\"0\",\"newNonce\":\"1\",\"movementType\":\"0\",\"address\":[\"0x31b87891\",\"0x8679d9DA\",\"0x1DB277B1\",\"0xA2fD67Aa\",\"0x01032920\"],\"merklePath\":[[\"0\",\"1\"],[\"1\",\"0\"],[\"0\",\"1\"],[\"1\",\"0\"],[\"0\",\"1\"],[\"1\",\"0\"],[\"0\",\"1\"],[\"1\",\"0\"]]},{\"oldEthAmount\":\"1000000000000\",\"oldTokenAmount\":\"0\",\"oldNonce\":\"0\",\"newEthAmount\":\"0\",\"newTokenAmount\":\"0\",\"newNonce\":\"1\",\"movementType\":\"1\",\"address\":[\"0x31b87891\",\"0x8679d9DA\",\"0x1DB277B1\",\"0xA2fD67Aa\",\"0x01032920\"],\"merklePath\":[[\"0\",\"1\"],[\"1\",\"0\"],[\"0\",\"1\"],[\"1\",\"0\"],[\"0\",\"1\"],[\"1\",\"0\"],[\"0\",\"1\"],[\"1\",\"0\"]]},{\"oldEthAmount\":\"0\",\"oldTokenAmount\":\"0\",\"oldNonce\":\"0\",\"newEthAmount\":\"1000000000000\",\"newTokenAmount\":\"0\",\"newNonce\":\"1\",\"movementType\":\"0\",\"address\":[\"0x31b87891\",\"0x8679d9DA\",\"0x1DB277B1\",\"0xA2fD67Aa\",\"0x01032920\"],\"merklePath\":[[\"0\",\"1\"],[\"1\",\"0\"],[\"0\",\"1\"],[\"1\",\"0\"],[\"0\",\"1\"],[\"1\",\"0\"],[\"0\",\"1\"],[\"1\",\"0\"]]}],\"1111111\"]" | ./memusg.sh zokrates compute-witness --light --abi --abi_spec ./abi.json --stdin >> console_log.txt
import "hashes/sha256/embed/512bitPadded" as sha256
import "utils/pack/bool/nonStrictUnpack256.zok" as field_to_bool
import "utils/pack/bool/pack128.zok" as pack128
import "hashes/sha256/embed/1024bitPadded" as sha256_4
import "utils/casts/u32_8_to_bool_256.zok" as u32_8_to_bool_256
import "utils/casts/u32_4_to_bool_128.zok" as u32_4_to_bool_128
import "utils/casts/u32_to_bits.zok" as u32_to_bits
import "EMBED/unpack" as unpack

struct BalanceMovementObject {
	field oldEthAmount
	field oldTokenAmount
	field oldNonce
	field newEthAmount
	field newTokenAmount
	field newNonce
	field movementType // 0: deposit, 1: withdraw
	u32[5] address
	field[16][2] merklePath
	field deltaEth
    field deltaToken
}
def field_to_64bit(field i) -> bool[64]:
    bool[254] b = unpack(i)
    assert(b[0..190] == [false; 190])
    return b[190..254]

def main(BalanceMovementObject[3] balances, field oldRoot, field newRoot) -> (field[2]):
    bool[256] res = sha256(field_to_bool(oldRoot), field_to_bool(newRoot))
    bool[256] depHash = [false; 256]
    for field i in 0..3 do
        bool[256] val = if balances[i].deltaEth > 0 then [...u32_4_to_bool_128(balances[i].address[0..4]), ...u32_to_bits(balances[i].address[4]), ...field_to_64bit(balances[i].deltaEth), ...[true;32]] else [...u32_4_to_bool_128(balances[i].address[0..4]), ...u32_to_bits(balances[i].address[4]), ...field_to_64bit(balances[i].deltaToken), ...[false;32]] fi
        depHash = if balances[i].movementType == 0 then sha256(depHash, val) else depHash fi
        bool[256] addrs = u32_8_to_bool_256([...balances[i].address, 0x00000000, 0x00000000, 0x00000000])
	    bool[256] amounts = [...field_to_64bit(balances[i].newEthAmount), ...field_to_64bit(balances[i].newTokenAmount), ...field_to_64bit(balances[i].newNonce), ...field_to_64bit(0)]
        res = sha256(res, sha256(addrs, amounts))
    endfor
	res = sha256(res, depHash)
    return [pack128(res[0..128]), pack128(res[128..256])]
// 0: 111172 -> 395076 per user
// 1: 506248
// 2: 901324
// 3: 1296400
